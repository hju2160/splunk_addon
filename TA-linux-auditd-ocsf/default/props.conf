[auditd]
# cim for change and dlp in the default sourcetype
EVAL-action=case(type == "SYSTEM_BOOT", "started", type == "SYSTEM_SHUTDOWN", "stopped", type == "CONFIG_CHANGE", "modified", type == "DAEMON_START", "started", type == "DAEMON_END", "stopped", type == "LABEL_LEVEL_CHANGE" AND like(exe, "%/cupsd") AND res == "failed", "denied", type == "LABEL_LEVEL_CHANGE" AND like(exe, "%/cupsd") AND res== "success" , "allowed", type == "VIRT_CONTROL" AND op == "attach", "modified", type == "VIRT_CONTROL" AND op == "build", "created", type == "VIRT_CONTROL" AND op == "changes", "modified", type == "VIRT_CONTROL" AND op == "connect", "modified", type == "VIRT_CONTROL" AND op == "create", "created", type == "VIRT_CONTROL" AND op == "df", "read", type == "VIRT_CONTROL" AND op == "disconnect", "logoff", type == "VIRT_CONTROL" AND op == "exec", "modified", type == "VIRT_CONTROL" AND op == "networks", "modified", type == "VIRT_CONTROL" AND op == "prune", "modified", type == "VIRT_CONTROL" AND op == "remove", "deleted", type == "VIRT_CONTROL" AND op == "resize", "modified", type == "VIRT_CONTROL" AND op == "start", "started", type == "VIRT_CONTROL" AND op == "stop", "stopped", type == "VIRT_CONTROL" AND op == "volumes", "modified", type == "VIRT_CONTROL" AND op == "_ping", "ping", type == "SOFTWARE_UPDATE", "updated", type == "DAEMON_CONFIG", "updated", type == "USYS_CONFIG", "modified", type == "USER_DEVICE" AND op == "discovered-device" AND res == "success", "allowed", type == "USER_DEVICE" AND op == "discovered-device" AND target == "failed", "denied", type == "USER_DEVICE" AND op == "changed-authorization-state-for", "acl_modified")
EVAL-app = case(type == "LABEL_LEVEL_CHANGE" AND like(exe, "%/cupsd"), "cups", type == "USER_DEVICE", exe)
EVAL-attacks.tactic.name=case(syscall == "execve" AND comm == "update-ca-trust", "Defense Evasion")
EVAL-attacks.technique.uid=case(syscall == "execve" AND comm == "update-ca-trust", "T1553.004")
EVAL-category = case(type == "LABEL_LEVEL_CHANGE" AND like(exe, "%/cupsd"), "printer", type == "USER_DEVICE" AND op == "discovered-device", "exfil")
EVAL-change_type=case(type == "SYSTEM_BOOT", "system", type == "SYSTEM_SHUTDOWN", "system", type == "CONFIG_CHANGE", "policy", type == "DAEMON_START", "auditing_agent", type == "DAEMON_END", "auditing_agent", type == "VIRT_CONTROL", "system_state", type == "SOFTWARE_UPDATE", "software_update", type == "DAEMON_CONFIG", "config", type == "USYS_CONFIG", op, type == "USER_DEVICE" AND op == "changed-authorization-state-for", op)
EVAL-command=case(type == "SYSTEM_BOOT", comm, type == "SYSTEM_SHUTDOWN", comm, type == "CONFIG_CHANGE", op, type == "DAEMON_START", OP, type == "DAEMON_END", OP, type == "VIRT_CONTROL", op, type == "SOFTWARE_UPDATE", exe, type == "DAEMON_CONFIG", op, type == "USYS_CONFIG", exe, type == "USER_DEVICE" AND op == "changed-authorization-state-for", exe)
EVAL-dest=case(type == "SYSTEM_BOOT", host, type == "SYSTEM_SHUTDOWN", host, type == "LABEL_LEVEL_CHANGE" AND like(exe, "%/cupsd"), printer, type == "VIRT_CONTROL", hostname, type == "SOFTWARE_UPDATE", host, type == "DAEMON_CONFIG", host, type == "USYS_CONFIG", host, type == "USER_DEVICE", host)
EVAL-dlp_type = case(type == "LABEL_LEVEL_CHANGE" AND like(exe, "%/cupsd"), "exfil_printer", type == "USER_DEVICE" AND op == "discovered-device", "exfil_usb")
EVAL-dvc=case(type == "SYSTEM_BOOT", host, type == "SYSTEM_SHUTDOWN", host, type == "LABEL_LEVEL_CHANGE" AND like(exe, "%/cupsd"), hostname, type == "VIRT_CONTROL", host, type == "SOFTWARE_UPDATE", host, type == "DAEMON_CONFIG", host, type == "USYS_CONFIG", host, type == "USER_DEVICE" AND op == "changed-authorization-state-for", host)
EVAL-object=case(type == "SYSTEM_BOOT", "system_state", type == "SYSTEM_SHUTDOWN", "system_state", type == "CONFIG_CHANGE", "linux_auditd",  type == "DAEMON_START", "linux_auditd", type == "DAEMON_END", "linux_auditd",type == "LABEL_LEVEL_CHANGE" AND like(exe, "%/cupsd"), uri, type == "VIRT_CONTROL", hostname, type == "SOFTWARE_UPDATE", sw, type == "DAEMON_CONFIG", "daemon", type == "USYS_CONFIG", "system_config", type == "USER_DEVICE", device)
EVAL-object_attrs=case(type == "SYSTEM_BOOT", "started", type == "SYSTEM_SHUTDOWN", "stopped", type == "CONFIG_CHANGE", op, type == "DAEMON_START", format, type == "DAEMON_END", format, type == "VIRT_CONTROL", reason, type == "SOFTWARE_UPDATE", sw_type, type == "USER_DEVICE" AND op == "changed-authorization-state-for", device_rule)
EVAL-object_category=case(type == "SYSTEM_BOOT", "instance", type == "SYSTEM_SHUTDOWN", "instance", type == "CONFIG_CHANGE", "auditd", type == "DAEMON_START", "auditd", type == "DAEMON_END", "auditd", type == "LABEL_LEVEL_CHANGE" AND like(exe, "%/cupsd"), "file", type == "VIRT_CONTROL", "instance", type == "SOFTWARE_UPDATE", instance, type == "DAEMON_CONFIG", "pid", type == "USYS_CONFIG", "config", type == "USER_DEVICE", "usb", type == "USER_DEVICE" AND op == "changed-authorization-state-for", "usb_monitoring")
EVAL-object_id=case(type == "VIRT_CONTROL", hostname)
EVAL-object_path=case(type == "SYSTEM_BOOT", "instance", type == "SYSTEM_SHUTDOWN", "instance", type == "LABEL_LEVEL_CHANGE" AND like(exe, "%/cupsd"), "network_printing", type == "USER_DEVICE", device)
EVAL-result=case(type == "SYSTEM_BOOT", res, type == "SYSTEM_SHUTDOWN", res, type == "CONFIG_CHANGE", res, type == "DAEMON_START", res, type == "DAEMON_END", res, type == "VIRT_CONTROL", res, type == "SOFTWARE_UPDATE", res, type == "DAEMON_CONFIG", state, type == "USYS_CONFIG", res)
EVAL-severity = case(type == "LABEL_LEVEL_CHANGE" AND like(exe, "%/cupsd"), "informational", type == "USER_DEVICE" AND op == "discovered-device", "high")
EVAL-signature = case(type == "LABEL_LEVEL_CHANGE" AND like(exe, "%/cupsd"), "cups_printer", type == "USER_DEVICE" AND op == "discovered-device", type)
EVAL-src=case(type == "SYSTEM_BOOT", terminal, type == "SYSTEM_SHUTDOWN", terminal, type == "CONFIG_CHANGE", host, type == "DAEMON_START", host, type == "DAEMON_END", host, type == "LABEL_LEVEL_CHANGE" AND like(exe, "%/cupsd"), "unknown", type == "VIRT_CONTROL", host, type == "SOFTWARE_UPDATE", host, type == "DAEMON_CONFIG", "unknown", type == "USYS_CONFIG", "unknown", type == "USER_DEVICE" AND op == "discovered-device", addr)
EVAL-src_user = case(type == "LABEL_LEVEL_CHANGE" AND like(exe, "%/cupsd"), auid, type == "USER_DEVICE" AND op == "discovered-device", auid)
EVAL-status=case(res == "failed", "failure", res == "success", "success", res == "yes", "success", success == "yes", "success", success == "no", "failure")
EVAL-user=case(type == "VIRT_CONTROL", user, type == "SYSTEM_BOOT", auid, type == "SYSTEM_SHUTDOWN", auid, type == "CONFIG_CHANGE", auid,  type == "DAEMON_START", uid, type == "DAEMON_END", uid, type == "LABEL_LEVEL_CHANGE" AND like(exe, "%/cupsd"), auid, type == "SOFTWARE_UPDATE", uid, type == "DAEMON_CONFIG", auid, type == "USYS_CONFIG", uid, type == "USER_DEVICE" AND op == "discovered-device", uid)
EVAL-user_name=case(type == "VIRT_CONTROL", user, type == "SYSTEM_BOOT", auid, type == "SYSTEM_SHUTDOWN", auid, type == "CONFIG_CHANGE", uid, type == "DAEMON_START", uid, type == "DAEMON_END", uid, type == "SOFTWARE_UPDATE", uid, type == "DAEMON_CONFIG", auid, type == "USYS_CONFIG", uid, type == "USER_DEVICE" AND op == "changed-authorization-state-for", uid)
EVAL-user_type=case(type == "SYSTEM_BOOT", "Admin", type == "SYSTEM_SHUTDOWN", "Admin", type == "CONFIG_CHANGE", "Admin", type == "DAEMON_START", "Admin", type == "DAEMON_END", "Admin", type == "VIRT_CONTROL", "Admin", type == "DAEMON_CONFIG", "Admin", type == "SOFTWARE_UPDATE", "Admin", type == "USYS_CONFIG", "Admin")
EVAL-vendor_product = case(type == "LABEL_LEVEL_CHANGE" AND like(exe, "%/cupsd"), "linux_cups", type == "USER_DEVICE" AND op == "discovered-device", "usbguard")

[source::auditd]
#testing changing the sourcetype names for everything
TRANSFORMS-auditdclasses = auditdclasses1, auditdclasses2, auditdclasses3, auditdclasses4, auditdclasses5, auditdclasses6
# types here https://access.redhat.com/articles/4409591
# global fields to check off immediately

REPORT-auditdarguments = auditdarguments
REPORT-message = nixmessages
REPORT-auditdproctitle = auditdproctitle
REPORT-avcmessage = avcmessage
# some of these fieldaliases cover too much, so will need to update with evals later, putting this here because alias covers entire sourcetype
FIELDALIAS-event_code = type as metadata.event_code

#default settings shared between all events in OCSF
FIELDALIAS-metadata.name = source AS metadata.name
FIELDALIAS-metadata.log_provider = source AS metadata.log_provider
FIELDALIAS-metadata.log_version = source AS metadata.log_version
EVAL-action_id=case(res == "failed", "2", res == "success", "1", res == "yes", "1", success == "yes", "1", success == "no", "2")
EVAL-time=strftime(_time, "%Y-%m-%dT%H:%M:%S.%Q")
EVAL-metadata.logged_time=strftime(_indextime, "%Y-%m-%dT%H:%M:%S.%Q")
EVAL-metadata.original_time=strftime(_time, "%Y-%m-%dT%H:%M:%S.%Q")
FIELDALIAS-metadata.product = source AS metadata.product
EVAL-metadata.version = "1.2.0"
#lookups
LOOKUP-type_name = nix_ocsf_type_name type_uid OUTPUT type_name type_uid_description
LOOKUP-auth_proto_id = nix_authentication_id_to_protocol auth_protocol OUTPUT auth_protocol_id
LOOKUP-logontypeid = nix_authentication_logon_type_id_to_type logon_type OUTPUT logon_type_description logon_type_id
LOOKUP-nix_security_risk_level = nix_security_risk_level risk_level_id OUTPUT risk_level
LOOKUP-status_id = nix_account_change_status_id status OUTPUT status_id
LOOKUP-analytic_type_id = nix_security_finding_analytic_type_id analytic.type_id OUTPUT analytic.type,analytic.type_description
LOOKUP-nix_security_impact = nix_security_impact impact_id OUTPUT impact impact_score
LOOKUP-nix_class_uid_activity_id_details = nix_class_uid_activity_id_details activity_id class_uid OUTPUT category_name category_uid class_name activity_name activity_description type_uid type_name type_uid_description severity_id severity

################
# Class specific fields and notes
################
[linux:audit:ocsf:sys:fs]
REPORT-auditddevicedomain = auditddevicedomain
FIELDALIAS-actor.app_name = syscall as actor.app_name
FIELDALIAS-actor.user = uid as actor.user
FIELDALIAS-actor.session.terminal = tty as actor.session.terminal
FIELDALIAS-device.domain = device_domain as device.domain
FIELDALIAS-component = name as component
FIELDALIAS-device = host as device
FIELDALIAS-device.hostname = host as device.hostname
FIELDALIAS-device.desc = arch as device.desc
FIELDALIAS-file_result.owner = ouid as file_result.owner
FIELDALIAS-file_result.signature = inode as file_result.signature
FIELDALIAS-file_result.path = cwd as file_result.path
EVAL-activity_id=case(comm == "mount", "12",comm == "umount" AND arguments == "O_RDONLY|O_PATH", "13", syscall == "openat" AND nametype == "CREATE" AND comm="gpg", "10", like(arguments, "%O_CREAT%"), "1", like(arguments, "%O_RDONLY%"), "2", syscall == "ftruncate", "3", arguments == "O_RDWR", "3", arguments == "O_RDWR|O_CLOEXEC", "3", arguments == "O_RDWR|O_NONBLOCK", "3", arguments == "O_WRONLY", "3", nametype == "DELETE", "4", syscall == "openat" AND nametype == "NORMAL" AND arguments == "O_RDONLY|O_CLOEXEC" AND comm="mv", "5", like(syscall, "unlink%"), "4", syscall == "rmdir", "4", like(syscall, "%chmod%"), "6", like(syscall, "%chown"), "6", like(syscall, "%set%attr"), "6", like(syscall, "%remove%attr"), "6", syscall == "mount", "12", like(syscall, "rename%"), "5")
EVAL-attacks.tactic.name=case(comm == "localectl" AND like(op, "open%"), "Discovery", comm == "aws" AND (full_proctitle IN ("%update-trail%"), "Defensive Evasion", comm == "aws" AND (full_proctitle IN ("%delete-trail%"), "Defensive Evasion", comm == "aws" AND (full_proctitle IN ("%stop-logging%"), "Defensive Evasion", arguments == "O_RDWR" AND like(name, "/etc/pam.d/%", "Credential Access")
EVAL-attacks.technique.uid=case(comm == "localectl" AND like(op, "open%"), "T1614.001", comm == "aws" AND (full_proctitle IN ("%update-trail%"), "T1562.008", comm == "aws" AND (full_proctitle IN ("%delete-trail%"), "T1562.008", comm == "aws" AND (full_proctitle IN ("%stop-logging%"), "T1562.008", arguments == "O_RDWR" AND like(name, "/etc/pam.d/%", "T1556.003")
EVAL-category_uid = "1"
EVAL-class_uid= "1001"
EVAL-device.group.type= "linux"
EVAL-device.hostname = host
EVAL-device.os.type= "linux"
EVAL-device.os.type= "200"
EVAL-file.accessed_time=case(mode == "file",  strftime(_time, "%Y-%m-%dT%H:%M:%S.%Q"))
EVAL-file.accessor.user.name=case(mode == "file",  auid)
EVAL-file.desc=case(syscall == "ftruncate" AND like(replace(full_proctitle, "(.+?)\s(\S+)", "\2"), "%conf"),  "configuration file")
EVAL-file.modified_time= strftime(_time, "%Y-%m-%dT%H:%M:%S.%Q")
EVAL-file_result.type_id=case(mode == "file", "1", mode == "dir", "4", mode == "character", "1")
EVAL-file.modifier=case(syscall == "ftruncate",  auid, arguments == "O_RDWR", auid, arguments == "O_RDWR|O_CLOEXEC", auid, arguments == "O_RDWR|O_NONBLOCK", "3", arguments == "O_WRONLY", auid)
EVAL-file.name= case(isnull(name), replace(full_proctitle, ".+(?:\s|\/)([^\s]+)$", "\1"), isnotnull(name), name)
EVAL-status=case(res == "failed", "failure", res == "success", "success", res == "yes", "success", success == "yes", "success", success == "no", "failure")
##########
# CIM mapping fields
##########
EVAL-app=case(like(exe, "%/umount") AND arguments == "O_RDONLY|O_PATH", "umount")
EVAL-dvc=case(like(exe, "%/umount") AND arguments == "O_RDONLY|O_PATH", host)
EVAL-category=case(like(exe, "%/umount") AND arguments == "O_RDONLY|O_PATH", "data exfil")
EVAL-action=case(success == "yes", "allowed", success == "no", "denied")
EVAL-dest=case(like(exe, "%/umount") AND arguments == "O_RDONLY|O_PATH", host)
EVAL-dlp_type=case(like(exe, "%/umount") AND arguments == "O_RDONLY|O_PATH", source)
EVAL-object=case(like(exe, "%/umount") AND arguments == "O_RDONLY|O_PATH", name)
EVAL-signature=case(like(exe, "%/umount") AND arguments == "O_RDONLY|O_PATH", "exfil")
EVAL-src_user=case(like(exe, "%/umount") AND arguments == "O_RDONLY|O_PATH", auid)
EVAL-user=case(like(exe, "%/umount") AND arguments == "O_RDONLY|O_PATH", uid)
EVAL-vendor_product=case(like(exe, "%/umount") AND arguments == "O_RDONLY|O_PATH", source)

[linux:audit:ocsf:sys:mod]
REPORT-auditddevicedomain = auditddevicedomain
FIELDALIAS-device.domain = device_domain as device.domain
FIELDALIAS-actor.user.name = auid as actor.user.name
FIELDALIAS-actor.process.cmd_line = full_proctitle AS actor.process.cmd_line
FIELDALIAS-actor.process.name = exe AS actor.process.name
FIELDALIAS-actor.process.lineage = exe AS actor.process.lineage
FIELDALIAS-actor.process.loaded_modules = name AS actor.process.loaded_modules
FIELDALIAS-actor.process.pid = pid AS actor.process.pid
FIELDALIAS-actor.process.session.uid = ses AS actor.process.session.uid
FIELDALIAS-actor.process.user.name = uid AS actor.process.user.name
FIELDALIAS-device = host as device
FIELDALIAS-device.hostname = host as device.hostname
FIELDALIAS-device.desc = arch as device.desc
FIELDALIAS-module.file.name = name AS module.file.name
FIELDALIAS-module.function_name = syscall AS module.function_name
FIELDALIAS-message = key as message
EVAL-activity_id=case(syscall == "init_module", "1", syscall == "delete_module", "2", syscall == "finit_module", "1")
EVAL-category_uid = "1"
EVAL-class_uid= "1005"
EVAL-actor.user.account.type_id = "9"
EVAL-actor.user.account.type = "Linux Account"
EVAL-actor.process.user.account.type_id = "9"
EVAL-actor.process.user.account.type = "Linux Account"
EVAL-device.group.type = "linux"
EVAL-device.os.type = "linux"
EVAL-device.os.type = "200"
EVAL-status=case(res == "failed", "failure", res == "success", "success", res == "yes", "success", success == "yes", "success", success == "no", "failure")

[linux:audit:ocsf:sys:proc]
# Process Activity [1007] Class
REPORT-auditddevicedomain = auditddevicedomain
FIELDALIAS-device.domain = device_domain as device.domain
EVAL-metadata.log_name=case(type == "SERVICE_START", "auditd", type == "SERVICE_STOP", "auditd")
EVAL-activity_id=case(type == "SERVICE_START", "1" ,type == "SERVICE_STOP", "2")
EVAL-attacks.tactic.name=case(type == "SERVICE_STOP" AND unit == "auditd", "Defensive Evasion", type == "SERVICE_STOP" AND unit == "rsyslog", "Defensive Evasion")
EVAL-attacks.technique.uid=case(type == "SERVICE_STOP" AND unit == "auditd", "T1562.012", type == "SERVICE_STOP" AND unit == "rsyslog", "T1562.001")
EVAL-category_uid = "1"
EVAL-class_uid= case(type == "SERVICE_START", "1007", type == "SERVICE_STOP", "1007")
EVAL-device=case(type == "SERVICE_START", host, type == "SERVICE_STOP", host)
EVAL-device.hostname=case(type == "SERVICE_START", host, type == "SERVICE_STOP", host)
EVAL-device.desc=case(type == "SERVICE_START", host, type == "SERVICE_STOP", host)
EVAL-device.desc=case(type == "SERVICE_START", arch, type == "SERVICE_STOP", arch)
EVAL-device.group.type=case(type == "SERVICE_START", "linux", type == "SERVICE_STOP", "linux")
EVAL-device.os.type=case(type == "SERVICE_START", "200", type == "SERVICE_STOP", "200")
EVAL-module=case(type == "SERVICE_START", unit, type == "SERVICE_STOP", unit)
EVAL-process=case(type == "SERVICE_START", exe ,type == "SERVICE_STOP", exe)

[linux:audit:ocsf:finding]
# Detection Finding [2004] Class
EVAL-activity_id=case(like(type, "ANOM_%"), "1", type == "USER_AVC", "1", type == "AVC", "1", type == "CRYPTO_REPLAY_USER", "1", type == "RESP_EXEC3", "2", type == "AVC_PATH", "1")
EVAL-category_uid = "2"
EVAL-class_uid= "2004"

EVAL-analytic.category=case(type == "USER_AVC", "selinux", type == "AVC", "selinux", like(type, "ANOM_%"), "auditd_ids")
EVAL-analytic.desc=case(type == "USER_AVC", "User space AVC message", type == "AVC", "SELinux AVC denial or grant", type == "ANOM_ABEND1", "Triggered when a processes ends abnormally (with a signal that could cause a core dump, if enabled).", type == "ANOM_ACCESS_FS1", "Triggered when a file or a directory access ends abnormally.", type == "ANOM_ADD_ACCT1", "Triggered when a user-space account addition ends abnormally.", type == "ANOM_AMTU_FAIL1", "Triggered when a failure of the Abstract Machine Test Utility (AMTU) is detected.", type == "ANOM_CRYPTO_FAIL1", "Triggered when a failure in the cryptographic system is detected.", type == "ANOM_DEL_ACCT1", "Triggered when a user-space account deletion ends abnormally.", type == "ANOM_EXEC1", "Triggered when an execution of a file ends abnormally.", type == "ANOM_LINK1", "Triggered when suspicious use of file links is detected.", type == "ANOM_LOGIN_ACCT1", "Triggered when an account login attempt ends abnormally.", type == "ANOM_LOGIN_FAILURES1", "Triggered when the limit of failed login attempts is reached.", type == "ANOM_LOGIN_LOCATION1", "Triggered when a login attempt is made from a forbidden location.", type == "ANOM_LOGIN_SESSIONS1", "Triggered when a login attempt reaches the maximum amount of concurrent sessions.", type == "ANOM_LOGIN_TIME1", "Triggered when a login attempt is made at a time when it is prevented by for example pam_time.", type == "ANOM_MAX_DAC1", "Triggered when the maximum amount of Discretionary Access Control (DAC) failures is reached.", type == "ANOM_MAX_MAC1", "Triggered when the maximum amount of Mandatory Access Control (MAC) failures is reached.", type == "ANOM_MK_EXEC1", "Triggered when a file is made executable.", type == "ANOM_MOD_ACCT1", "Triggered when a user-space account modification ends abnormally.", type == "ANOM_PROMISCUOUS1", "Triggered when a device enables or disables promiscuous mode.", type == "ANOM_RBAC_FAIL1", "Triggered when a Role-Based Access Control (RBAC) self-test failure is detected.", type == "ANOM_RBAC_INTEGRITY_FAIL1", "Triggered when a Role-Based Access Control (RBAC) file integrity test failure is detected.", type == "ANOM_ROOT_TRANS1", "Triggered when a user becomes root.")
EVAL-analytic.name=case(type == "USER_AVC", "avc", type == "AVC", "avc", like(type, "ANOM_%"), "anom")
EVAL-analytic.type_id=case(type == "USER_AVC", "1", type == "AVC", "1", like(type, "ANOM_%"), "2")
# need to work on attacks array
EVAL-attacks.technique.name=case(type == "ANOM_PROMISCUOUS", "Network Sniffing", type == "ANOM_LOGIN_FAILURES", "Brute Force", type == "ANOM_LOGIN_SESSIONS", "Valid Account", type == "ANOM_LINK", "Compromise Infrastructure", type == "ANOM_ABEND", "Data From Local System")
EVAL-attacks.technique.uid=case(type == "ANOM_PROMISCUOUS", "T1040", type == "ANOM_LOGIN_FAILURES", "T1110", type == "ANOM_LOGIN_SESSIONS", "T1078", type == "ANOM_LINK", "T1584", type == "ANOM_ABEND", "T1005")
EVAL-attacks.tactic.name=case(type == "ANOM_PROMISCUOUS", "Discovery", type == "ANOM_LOGIN_FAILURES", "Credential Access", type == "ANOM_LOGIN_SESSIONS", "Initial Access", type == "ANOM_LINK", "Resource Development", type == "ANOM_ABEND", "Collection")
EVAL-attacks.tactic.uid=case(type == "ANOM_PROMISCUOUS", "TA0007", type == "ANOM_LOGIN_FAILURES", "TA006", type == "ANOM_LOGIN_SESSIONS", "TA0001", type == "ANOM_LINK", "TA0042", type == "ANOM_ABEND", "TA0009")
EVAL-confidence=case(type == "ANOM_PROMISCUOUS", "High", type == "ANOM_LOGIN_FAILURES", "High", type == "ANOM_LOGIN_SESSIONS", "High", type == "ANOM_LINK", "High", type == "ANOM_ABEND", "High", type == "AVC", "High", type == "USER_AVC", "High")
EVAL-cis_csc.control=case(type == "USER_AVC", "Ensure SELinux policy is configured - config", type == "AVC", "Ensure SELinux policy is configured - config")
EVAL-cis_csc.version=case(type == "USER_AVC", "1.6.1.3", type == "AVC", "1.6.1.3")
# need to add compliance and subcategories
EVAL-confidence_id=case(type == "ANOM_PROMISCUOUS", "3", type == "ANOM_LOGIN_FAILURES", "3", type == "ANOM_LOGIN_SESSIONS", "3", type == "ANOM_LINK", "3", type == "ANOM_ABEND", "3", type == "AVC", "3", type == "USER_AVC", "3")
LOOKUP-nix_security_confidence_id_translate = nix_security_confidence_id_translate confidence_id OUTPUT confidence confidence_description
EVAL-data_sources=case(type == "USER_AVC", "selinux", type == "AVC", "selinux", like(type, "ANOM_%"), "auditd_ids")
EVAL-evidence=case(type == "ANOM_PROMISCUOUS", dev, type == "ANOM_LOGIN_FAILURES", message, type == "ANOM_LOGIN_SESSIONS", op, type == "ANOM_LINK", op, type == "ANOM_ABEND", reason, type == "AVC", avc_attempted_action, type == "USER_AVC", avc_attempted_action)
EVAL-finding.desc=case(type == "ANOM_PROMISCUOUS", "Triggered when a device enables or disables promiscuous mode", type == "ANOM_LOGIN_FAILURES", "Triggered when the limit of failed login attempts is reached", type == "ANOM_LOGIN_SESSIONS", "Triggered when a login attempt reaches the maximum amount of concurrent sessions", type == "ANOM_LINK", "Triggered when suspicious use of file links is detected", type == "ANOM_ABEND", "Triggered when a process ends abnormally with a signal that could cause a core dump if enabled", type == "AVC", "Triggered to record an SELinux permission check", type == "USER_AVC", "Triggered when a user-space AVC message is generated")
EVAL-finding.title = case(like(type, "ANOM_%"), type, like(type, "RESP%"), type, like(type, "%AVC"), avc_message, type == "CRYPTO_REPLAY_USER", type)
EVAL-finding.uid = case(type == "ANOM_PROMISCUOUS", ses, type == "ANOM_LOGIN_FAILURES", ses, type == "ANOM_LOGIN_SESSIONS", ses, type == "ANOM_LINK", ses, type == "ANOM_ABEND", ses, type == "AVC", pid, type == "USER_AVC", pid)
EVAL-impact=case(type == "ANOM_PROMISCUOUS", "Medium", type == "ANOM_LOGIN_FAILURES", "Medium", type == "ANOM_LOGIN_SESSIONS", "Low", type == "ANOM_LINK", "Low", type == "ANOM_ABEND", "Medium", type == "AVC", "Medium", type == "USER_AVC", "Medium")
EVAL-impact_id = case(type == "ANOM_PROMISCUOUS", "2", type == "ANOM_LOGIN_FAILURES", "2", type == "ANOM_LOGIN_SESSIONS", "1", type == "ANOM_LINK", "1", type == "ANOM_ABEND", "2", type == "AVC", "2", type == "USER_AVC", "2")
EVAL-kill_chain.phase=case(type == "ANOM_PROMISCUOUS", "Reconnaissance", type == "ANOM_LOGIN_FAILURES", "Exploitation", type == "ANOM_LOGIN_SESSIONS", "Command & Control", type == "ANOM_LINK", "Weaponization", type == "ANOM_ABEND", "Reconnaissance")
EVAL-kill_chain.phase_id=case(type == "ANOM_PROMISCUOUS", "1", type == "ANOM_LOGIN_FAILURES", "4", type == "ANOM_LOGIN_SESSIONS", "6", type == "ANOM_LINK", "2", type == "ANOM_ABEND", "1")
# need malware
# need nist
# need observables
EVAL-process=case(type == "ANOM_PROMISCUOUS", uid, type == "ANOM_LOGIN_FAILURES", exe, type == "ANOM_LOGIN_SESSIONS", exe, type == "ANOM_LINK", exe, type == "ANOM_ABEND", comm, type == "AVC", avc_attempted_action, type == "USER_AVC", avc_attempted_action)
EVAL-process.file.name=case(type == "ANOM_PROMISCUOUS", uid, type == "ANOM_LOGIN_FAILURES", exe, type == "ANOM_LOGIN_SESSIONS", exe, type == "ANOM_LINK", exe, type == "ANOM_ABEND", comm, type == "AVC", tclass, type == "USER_AVC", tclass)
EVAL-process.lineage=case(type == "ANOM_PROMISCUOUS", uid, type == "ANOM_LOGIN_FAILURES", exe, type == "ANOM_LOGIN_SESSIONS", exe, type == "ANOM_LINK", exe, type == "ANOM_ABEND", comm, type == "AVC", comm, type == "USER_AVC", exe)
EVAL-process.name=case(type == "ANOM_PROMISCUOUS", uid, type == "ANOM_LOGIN_FAILURES", exe, type == "ANOM_LOGIN_SESSIONS", exe, type == "ANOM_LINK", exe, type == "ANOM_ABEND", comm, type == "AVC", comm, type == "USER_AVC", exe)
EVAL-process.pid=case(type == "ANOM_PROMISCUOUS", pid, type == "ANOM_LOGIN_FAILURES", pid, type == "ANOM_LOGIN_SESSIONS", pid, type == "ANOM_LINK", pid, type == "ANOM_ABEND", pid, type == "AVC", "High", type == "USER_AVC", pid)
EVAL-process.session=case(type == "ANOM_PROMISCUOUS", ses, type == "ANOM_LOGIN_FAILURES", ses, type == "ANOM_LOGIN_SESSIONS", ses, type == "ANOM_LINK", ses, type == "ANOM_ABEND", ses, type == "USER_AVC", ses)
EVAL-process.uid=case(type == "ANOM_PROMISCUOUS", ses, type == "ANOM_LOGIN_FAILURES", ses, type == "ANOM_LOGIN_SESSIONS", ses, type == "ANOM_LINK", ses, type == "ANOM_ABEND", ses, type == "AVC", pid, type == "USER_AVC", ses)
EVAL-process.tid=case(type == "ANOM_PROMISCUOUS", ses, type == "ANOM_LOGIN_FAILURES", ses, type == "ANOM_LOGIN_SESSIONS", ses, type == "ANOM_LINK", ses, type == "ANOM_ABEND", ses, type == "AVC", pid, type == "USER_AVC", ses)
EVAL-process.user.name=case(type == "ANOM_PROMISCUOUS", auid, type == "ANOM_LOGIN_FAILURES", auid, type == "ANOM_LOGIN_SESSIONS", auid, type == "ANOM_LINK", auid, type == "ANOM_ABEND", auid, type == "USER_AVC", auid)
EVAL-resources.name=case(type == "ANOM_PROMISCUOUS", host, type == "ANOM_LOGIN_FAILURES", host, type == "ANOM_LOGIN_SESSIONS", host, type == "ANOM_LINK", host, type == "ANOM_ABEND", host, type == "AVC", name, type == "AVC", path, type == "USER_AVC", host)
EVAL-resources.labels=case(type == "USER_AVC", subj, type == "AVC", subj, like(type, "ANOM_%"), subj)
EVAL-resources.owner = case(type == "USER_AVC", tclass, type == "AVC", tclass, like(type, "ANOM_%"), auid)
EVAL-risk_level=case(type == "ANOM_PROMISCUOUS", "Medium", type == "ANOM_LOGIN_FAILURES", "Low", type == "ANOM_LOGIN_SESSIONS", "Medium", type == "ANOM_LINK", "Medium", type == "ANOM_ABEND", "Low", type == "AVC", "Medium", type == "USER_AVC", "Medium")
EVAL-risk_level_id= case(type == "ANOM_PROMISCUOUS", "2", type == "ANOM_LOGIN_FAILURES", "1", type == "ANOM_LOGIN_SESSIONS", "2", type == "ANOM_LINK", "2", type == "ANOM_ABEND", "1", type == "AVC", "2", type == "USER_AVC", "2")
EVAL-severity_id= case(type == "ANOM_PROMISCUOUS", "3", type == "ANOM_LOGIN_FAILURES", "2", type == "ANOM_LOGIN_SESSIONS", "3", type == "ANOM_LINK", "3", type == "ANOM_ABEND", "2", type == "AVC", "2", type == "USER_AVC", "1")
EVAL-state_id= case(type == "ANOM_PROMISCUOUS", "1", type == "ANOM_LOGIN_FAILURES", "1", type == "ANOM_LOGIN_SESSIONS", "1", type == "ANOM_LINK", "1", type == "ANOM_ABEND", "1", type == "AVC", "1", type == "USER_AVC", "1")
EVAL-status=case(res == "failed", "failure", res == "success", "success", res == "yes", "success", success == "yes", "success", success == "no", "failure")
####
# CIM MAPPING FOR IDS
####
FIELDALIAS-user=auid as user
FIELDALIAS-dest=host as dest
FIELDALIAS-file_name=comm as file_name
FIELDALIAS-file_path=exe as file_path
FIELDALIAS-signature=syscall as signature
EVAL-action=case(success == "yes", "allowed", success == "no", "blocked")
EVAL-category="unknown"
EVAL-dvc=host
EVAL-ids_type="host"
EVAL-src="unknown"
EVAL-transport="unknown"
EVAL-vendor_product="auditd"

[linux:audit:ocsf:iam]
###########################
# CIM compliance fields for backward compatibility
###########################
# CIM compliance fields for backward compatibility
#auth
FIELDALIAS-app = exe as app
FIELDALIAS-dest = host as dest
FIELDALIAS-src_user = auid as src_user
FIELDALIAS-actor.user = auid as actor.user
EVAL-action = case(type == "USER_CHAUTHTOK", "updated", type == "ADD_USER", "created", type == "ADD_GROUP", "created", type == "DEL_USER", "deleted", type == "ACCT_LOCK", "lockout", type == "ACCT_UNLOCK", "unlocked", type == "USER_MGMT" AND like(op, "add%"), "modified", type == "USER_MGMT" AND like(op, "chang%"), "modified", type == "USER_MGMT" AND like(op, "delet%"), "deleted", type == "USER_MGMT" AND like(op, "pam_tally%"), "modified", type == "USER_MGMT" AND like(op, "updat%"), "updated", type == "GRP_MGMT" AND like(op, "add%"), "modified", type == "GRP_MGMT" AND like(op, "chang%"), "modified", type == "GRP_MGMT" AND like(op, "delet%"), "deleted", type == "GRP_MGMT" AND like(op, "pam_tally%"), "modified", type == "GRP_MGMT" AND like(op, "updat%"), "updated", res == "failed", "failure", res == "success", "success", res == "yes", "success", success == "yes", "success", success == "no", "failure", type == "CHGRP_ID", "modified", type == "DEL_GROUP", "deleted") 
EVAL-src = if(addr == "?", "unknown", addr)
#change
FIELDALIAS-dvc = host as dvc
EVAL-change_type = case(type == "ADD_GROUP", "AAA", type == "ADD_USER", "AAA", type == "DEL_USER", "AAA", type == "CHGRP_ID", "AAA", type == "USER_CHAUTHTOK", "AAA",type == "ACCT_LOCK", "AAA", type == "ACCT_UNLOCK", "AAA", type == "CHGRP_ID", "AAA", type == "USER_MGMT", "AAA", type == "GRP_MGMT", "AAA", type == "DEL_GROUP", op)
EVAL-command = case(type == "ADD_GROUP", exe, type == "ADD_USER", exe, type == "DEL_USER", exe, type == "CHGRP_ID", exe, type == "USER_CHAUTHTOK", exe, type == "ACCT_LOCK", op, type == "ACCT_UNLOCK", op, type == "CHGRP_ID", op, type == "USER_MGMT", exe, type == "USER_MGMT", exe, type == "DEL_GROUP", exe)
EVAL-object = case(type == "USER_CHAUTHTOK", acct, type == "ADD_USER", id, type == "ADD_GROUP", id, type == "DEL_USER", id, type == "ACCT_LOCK", id, type == "ACCT_UNLOCK", id, type == "CHGRP_ID", id, type == "USER_MGMT", id, type == "USER_MGMT", id, type == "DEL_GROUP", grp)
EVAL-object_attrs = case(type == "ACCT_LOCK", op, type == "ACCT_UNLOCK", op, type == "CHGRP_ID", new_group, type == "USER_MGMT", op, type == "USER_MGMT", op, type == "DEL_GROUP", op)
EVAL-object_category = case(type == "USER_CHAUTHTOK", "user", type == "ADD_USER", "user", type == "ADD_GROUP", "group", type == "DEL_USER", "user", type == "ACCT_LOCK", "user", type == "ACCT_UNLOCK", "user", type == "CHGRP_ID", "group", type == "USER_MGMT", "user", type == "USER_MGMT", "group", type == "DEL_GROUP", "group")
EVAL-result=case(res == "failed", "failure", res == "success", "success", res == "yes", "success", success == "yes", "success", success == "no", "failure", type == "DEL_GROUP", res)
EVAL-user=case(type == "LOGIN", auid, type == "CRYPTO_LOGIN", auid, type == "USER_ACCT", auid, type == "USER_LOGOUT", auid, type == "USER_END", auid, type == "USER_AUTH", acct, type == "DEL_USER", auid, type == "USER_CHAUTHTOK", auid, type == "ADD_USER", auid, type == "ADD_GROUP", auid, type == "ACCT_LOCK", uid, type == "ACCT_UNLOCK", uid, type == "CHGRP_ID", uid, type == "USER_MGMT", uid, type == "DEL_GROUP", uid)
EVAL-user_type=case(type == "DEL_GROUP", "Admin")
###########################
# Account Change [3001] Class
# covers the following audit types: ADD_GROUP, ADD_USER, DEL_USER, DEL_GROUP, CHGRP_ID, USER_CHAUTHTOK
# does not cover these fields yet count: duration, end_time, enrichments, http_request, metadata(some), observables, raw_data, start_time, status_code, timezone_offset, unmapped

FIELDALIAS-status_detail = message as status_detail
EVAL-actor.app_name=case(type == "LOGIN", exe, type == "CRYPTO_LOGIN", exe, type == "USER_ACCT", exe, type == "USER_LOGOUT", exe, type == "USER_END", exe, type == "USER_AUTH", exe, type == "DEL_USER", exe, type == "USER_CHAUTHTOK", exe, type == "ADD_USER", exe, type == "ADD_GROUP", exe, type == "ACCT_LOCK", exe, type == "CHGRP_ID", exe, type == "DEL_GROUP", exe)
EVAL-actor.authorizations.decision=case(type == "LOGIN" AND res == "success", "allowed", type == "LOGIN" AND res == "yes", "allowed", type == "LOGIN" AND res == "failure", "denied", type == "LOGIN" AND res == "no", "denied", type == "CRYPTO_LOGIN" AND res == "success", "allowed", type == "CRYPTO_LOGIN" AND res == "yes", "allowed", type == "CRYPTO_LOGIN" AND res == "failure", "denied", type == "CRYPTO_LOGIN" AND res == "no", "denied", type == "USER_ACCT" AND res == "success", "allowed", type == "USER_ACCT" AND res == "yes", "allowed", type == "USER_ACCT" AND res == "failure", "denied", type == "USER_ACCT" AND res == "no", "denied", type == "USER_LOGOUT" AND res == "success", "allowed", type == "USER_LOGOUT" AND res == "yes", "allowed", type == "USER_LOGOUT" AND res == "failure", "denied", type == "USER_LOGOUT" AND res == "no", "denied", type == "USER_END" AND res == "success", "allowed", type == "USER_END" AND res == "yes", "allowed", type == "USER_END" AND res == "failure", "denied", type == "USER_END" AND res == "no", "denied", type == "USER_AUTH" AND res == "success", "allowed", type == "USER_AUTH" AND res == "yes", "allowed", type == "USER_AUTH" AND res == "failure", "denied", type == "USER_AUTH" AND res == "no", "denied", type == "ACCT_LOCK" AND res == "success", "allowed", type == "ACCT_LOCK" AND res == "failed", "denied", type == "CHGRP_ID" AND res == "success", "allowed", type == "CHGRP_ID" AND res == "failed, "denied", type == "DEL_GROUP" AND res == "success", "allowed", type == "DEL_GROUP" AND res == "failed", "denied")
EVAL-actor.idp.name=case(type == "LOGIN", grantors, type == "CRYPTO_LOGIN", grantors, type == "USER_ACCT", grantors, type == "USER_LOGOUT", grantors, type == "USER_END", grantors, type == "USER_AUTH", grantors, type == "DEL_USER", grantors, type == "USER_CHAUTHTOK", grantors, type == "ADD_USER", grantors, type == "ADD_GROUP", grantors)

EVAL-activity_id=case(type == "ADD_GROUP", "1", type == "ADD_USER", "1", type == "DEL_USER", "6", type == "CHGRP_ID", "7", type == "USER_CHAUTHTOK", "7", type == "LOGIN", "1", type == "CRYPTO_LOGIN", "1", type == "USER_ACCT", "1", type == "USER_LOGOUT", "2", type == "USER_END", "2", type == "USER_AUTH", "1", type == "ACCT_LOCK", "9", type == "CHGRP_ID", "3", type == "DEL_GROUP", "6")
EVAL-category_uid = "3"
EVAL-class_uid = case(type == "ADD_GROUP", "3001", type == "ADD_USER", "3001", type == "DEL_USER", "3001", type == "CHGRP_ID", "3001", type == "USER_CHAUTHTOK", "3001", type == "ACCT_LOCK", "3001", type == "LOGIN", "3002", type == "CRYPTO_LOGIN", "3002", type == "USER_LOGOUT", "3002", type == "USER_END", "3002", type == "USER_AUTH", "3002", type == "USER_ACCT", "3003", type == "CHGRP_ID", "3006", type == "DEL_GROUP", "3001")
EVAL-status=case(res == "failed", "failure", res == "success", "success", res == "yes", "success", success == "yes", "success", success == "no", "failure")
EVAL-user_result.uid_alt=case(type == "ADD_USER", replace(user, "[a-zA-Z\(\)]", ""))
EVAL-user_result.account=case(type == "ADD_USER", id, type == "ACCT_LOCK", id)
EVAL-user_result.name=case(type == "ADD_USER", id, type == "ACCT_LOCK", id)
EVAL-user_result.id=case(type == "ADD_USER", "0")
EVAL-user_result.uid=case(type == "ADD_USER", replace(user, "[a-zA-Z\(\)]", ""))

# Authentication [3002] Class
# does not cover these fields yet: activity_id: certificate, count, duration, enrichments, http_request, message, metadata, is_mfa, is_new_logon, observables, raw_data, status_detail, timezone_offset, unmapped

EVAL-auth_protocol=case(type == "LOGIN", "pam", type == "CRYPTO_LOGIN", "pam", type == "USER_ACCT", "pam", type == "USER_LOGOUT", "pam", type == "USER_END", "pam", type == "USER_AUTH", "pam")
EVAL-auth_protocol_id=case(type == "LOGIN", "99", type == "CRYPTO_LOGIN", "99", type == "USER_ACCT", "99", type == "USER_LOGOUT", "99", type == "USER_END", "99", type == "USER_AUTH", "99")
EVAL-dst_endpoint=case(type == "LOGIN", host, type == "CRYPTO_LOGIN", host, type == "USER_ACCT", host, type == "USER_LOGOUT", host, type == "USER_END", host, type == "USER_AUTH", host, type == "GRP_AUTH", host)
EVAL-logon_process=case(type == "LOGIN", exe, type == "CRYPTO_LOGIN", exe, type == "USER_ACCT", exe, type == "USER_LOGOUT", exe, type == "USER_END", exe, type == "USER_AUTH", exe)
EVAL-logon_process.lineage=case(type == "LOGIN", exe, type == "CRYPTO_LOGIN", exe, type == "USER_ACCT", exe, type == "USER_LOGOUT", exe, type == "USER_END", exe, type == "USER_AUTH", exe)
EVAL-logon_process.pid=case(type == "LOGIN", pid, type == "CRYPTO_LOGIN", pid, type == "USER_ACCT", pid, type == "USER_LOGOUT", pid, type == "USER_END", pid, type == "USER_AUTH", pid)
EVAL-logon_process.session=case(type == "LOGIN", ses, type == "CRYPTO_LOGIN", ses, type == "USER_ACCT", ses, type == "USER_LOGOUT", ses, type == "USER_END", ses, type == "USER_AUTH", ses)
EVAL-logon_process.user=case(type == "LOGIN", auid, type == "CRYPTO_LOGIN", auid, type == "USER_ACCT", auid, type == "USER_LOGOUT", auid, type == "USER_END", auid, type == "USER_AUTH", auid)
EVAL-service.name=case(type == "LOGIN", exe, type == "CRYPTO_LOGIN", exe, type == "USER_ACCT", exe, type == "USER_LOGOUT", exe, type == "USER_END", exe, type == "USER_AUTH", exe)
EVAL-session.uid=case(type == "LOGIN", ses, type == "CRYPTO_LOGIN", ses, type == "USER_ACCT", ses, type == "USER_LOGOUT", ses, type == "USER_END", ses, type == "USER_AUTH", ses)
EVAL-end_time=case(type == "USER_LOGOUT", strftime(_time, "%Y-%m-%dT%H:%M:%S.%Q"), type == "USER_END", strftime(_time, "%Y-%m-%dT%H:%M:%S.%Q"))
EVAL-is_cleartext=case(like(exe, "%/sshd"), "false", like(exe, "%/sudo"), "false", like(exe, "%/sftp"), "false", like(exe, "%/ftp"), "true", like(exe, "%/telnet"), "true")
EVAL-logon_type=case(like(exe, "%/sshd"), "Remote Interactive", like(exe, "%/sftp"), "Remote Interactive", like(exe, "%/ftp"), "Network Cleartext", like(exe, "%/telnet"), "Network Cleartext", like(exe, "%/sudo"), "Interactive")
EVAL-is_remote=case(like(exe, "%/sshd"), "true", like(exe, "%/sudo"), "false", like(exe, "%/sftp"), "true", like(exe, "%/ftp"), "true", like(exe, "%/telnet"), "true")
EVAL-session.created_time=case(like(exe, "%/sshd"), strftime(_time, "%Y-%m-%dT%H:%M:%S.%Q"), like(exe, "%/sudo"), strftime(_time, "%Y-%m-%dT%H:%M:%S.%Q"), like(exe, "%/sftp"), strftime(_time, "%Y-%m-%dT%H:%M:%S.%Q"), like(exe, "%/ftp"), strftime(_time, "%Y-%m-%dT%H:%M:%S.%Q"), like(exe, "%/telnet"), strftime(_time, "%Y-%m-%dT%H:%M:%S.%Q"))
EVAL-session.is_remote=case(like(exe, "%/sshd"), "true", like(exe, "%/sudo"), "false", like(exe, "%/sftp"), "true", like(exe, "%/ftp"), "true", like(exe, "%/telnet"), "true")
EVAL-src_endpoint=case(type == "ADD_GROUP", host, type == "ADD_USER", host, type == "DEL_USER", host, type == "CHGRP_ID", host, host, type == "USER_CHAUTHTOK", host, type == "LOGIN", addr, type == "CRYPTO_LOGIN", addr, type == "USER_ACCT", addr, type == "USER_LOGOUT", addr, type == "USER_END", addr, type == "USER_AUTH", addr, type == "USER_AUTH", addr, type == "GRP_AUTH", addr)
EVAL-start_time=case(type == "LOGIN", strftime(_time, "%Y-%m-%dT%H:%M:%S.%Q"), type == "CRYPTO_LOGIN", strftime(_time, "%Y-%m-%dT%H:%M:%S.%Q"), type == "USER_ACCT", strftime(_time, "%Y-%m-%dT%H:%M:%S.%Q"), type == "USER_AUTH", strftime(_time, "%Y-%m-%dT%H:%M:%S.%Q"), type == "USER_AUTH", strftime(_time, "%Y-%m-%dT%H:%M:%S.%Q"), type == "GRP_AUTH", strftime(_time, "%Y-%m-%dT%H:%M:%S.%Q"))
EVAL-user.account=case(type == "LOGIN", auid, type == "CRYPTO_LOGIN", auid, type == "USER_ACCT", auid, type == "USER_LOGOUT", auid, type == "USER_END", auid, type == "USER_AUTH", auid, type == "USER_AUTH", acct, type == "GRP_AUTH", acct, type == "DEL_USER", id, type == "USER_CHAUTHTOK", acct, type == "ADD_USER", id, type == "ADD_GROUP", id, type == "ACCT_LOCK", id)
EVAL-user.name=case(type == "LOGIN", auid, type == "CRYPTO_LOGIN", auid, type == "USER_ACCT", auid, type == "USER_LOGOUT", auid, type == "USER_END", auid, type == "USER_AUTH", auid, type == "USER_AUTH", acct, type == "GRP_AUTH", acct, type == "DEL_USER", id, type == "USER_CHAUTHTOK", acct, type == "ADD_USER", id, type == "ADD_GROUP", id, type == "ACCT_LOCK", id)

#Authorize Session [3003] Class
# many covered in above settings that are combined
# missing group, can come from ES Identities
# missing privileges, can come from ES Identities
# missing user.type_id, can come from ES Identities

# [3006]
EVAL-group.name=case(type == "CHGRP_ID", new_group)
EVAL-resource.name=case(type == "CHGRP_ID", id)
EVAL-resource.group.name=case(type == "CHGRP_ID", new_group)

# Network Activity [4001] Class 
[linux:audit:ocsf:network]
EVAL-status=case(res == "failed", "failure", res == "success", "success", res == "yes", "success", success == "yes", "success", success == "no", "failure")
EVAL-activity_id=case(like(saddr_fam, "inet%"), "1", like(fam, "inet%"), "1")
EVAL-app_name=case(like(saddr_fam, "inet%"), comm, like(fam, "inet%"), comm)
EVAL-category_uid=case(like(saddr_fam, "inet%"), "4", like(fam, "inet%"), "4")
EVAL-class_uid=case(like(saddr_fam, "inet%"), "4001", like(fam, "inet%"), "4001")
EVAL-connection_info.boundary_id=case(like(saddr_fam, "inet%") AND like(laddr, "127%"), "1", like(fam, "inet%") AND like(laddr, "127%"), "1")
EVAL-dst_endpoint.ip=case(like(saddr_fam, "inet%"), laddr, like(fam, "inet%"), laddr)
EVAL-dst_endpoint.port=case(like(saddr_fam, "inet%"), lport, like(fam, "inet%"), lport)
EVAL-dst_endpoint.svc_name=case(like(saddr_fam, "inet%"), comm, like(fam, "inet%"), comm)
EVAL-message=case(like(saddr_fam, "inet%"), full_proctitle, like(fam, "inet%"), full_proctitle)
EVAL-src_endpoint.hostname=case(like(saddr_fam, "inet%"), host, like(fam, "inet%"), host)
EVAL-src_endpoint.port=case(like(saddr_fam, "inet%"), "unknown", like(fam, "inet%"), "unknown")
EVAL-src_endpoint.svc_name=case(like(saddr_fam, "inet%"), comm, like(fam, "inet%"), comm)
EVAL-status_code=case(like(saddr_fam, "inet%"), exit, like(fam, "inet%"), exit)

####
# CIM DLP/Network_Traffic
###
REPORT-nixnetworkdlp = nixnetworkdlp1, nixnetworkdlp2, nixnetworkdlp3
EVAL-action=case(comm == "scp" AND success == "yes", "allowed", comm == "scp" AND success == "no", "denied", comm == "ssh" AND lport == "22" AND success == "yes", "allowed", comm == "ssh" AND lport == "22" AND success == "no", "denied", like(saddr_fam, "inet%") AND success == "yes", "allowed", like(saddr_fam, "inet%") AND success == "no", "blocked", like(fam, "inet%") AND success == "yes", "allowed", like(fam, "inet%") AND success == "no", "blocked")
EVAL-app=case(like(saddr_fam, "inet%"), comm, like(fam, "inet%"), comm) 
EVAL-category=case(comm == "scp", "file transfer", comm == "ssh" AND lport == "22", "file transfer") 
EVAL-dest=if(isnull(dest), laddr, dest)
EVAL-dest_ip=case(like(saddr_fam, "inet%"), laddr, like(fam, "inet%"), laddr)
EVAL-dest_port=case(like(saddr_fam, "inet%"), lport, like(fam, "inet%"), lport)
EVAL-dlp_type=case(comm == "scp", sourcetype, comm == "ssh" AND lport == "22", sourcetype) 
EVAL-dvc=case(comm == "scp", host, comm == "ssh" AND lport == "22", host, like(saddr_fam, "inet%"), host, like(fam, "inet%"), host) 
EVAL-object=split(objects, ",") 
EVAL-object_category=case(comm == "scp", "file", comm == "ssh" AND lport == "22", "file") 
EVAL-object_path=case(comm == "scp", cwd, comm == "ssh" AND lport == "22", cwd) 
EVAL-severity=case(comm == "scp", "medium", comm == "ssh" AND lport == "22", "medium") 
EVAL-signature=case(comm == "scp", "possible data exfil", comm == "ssh" AND lport == "22", "possible data exfil") 
EVAL-signature_id=case(comm == "scp", pid, comm == "ssh" AND lport == "22", pid) 
EVAL-src=case(comm == "scp", host, comm == "ssh" AND lport == "22", host, like(saddr_fam, "inet%"), host, like(fam, "inet%"), host) 
EVAL-src_user=case(comm == "scp", auid, comm == "ssh" AND lport == "22", auid) 
EVAL-user=case(comm == "scp", uid, comm == "ssh" AND lport == "22", uid, like(saddr_fam, "inet%"), auid, like(fam, "inet%"), auid) 
EVAL-vendor_product=case(comm == "scp", comm, comm == "ssh" AND lport == "22", comm)
